#!/bin/bash
###############################################################################
# mount.remote - A script to mount GDrive remote for use with Plex
###############################################################################
# CONFIGURATION
###############################################################################
# shellcheck source=config

. "/usr/bin/config"
###############################################################################
# FUNCTIONS
###############################################################################
mount_gdrive () {
	cloud_dir="${cloud_encrypt_dir}"
	if [ "$(printenv ENCRYPT_MEDIA)" -eq "0" ]; then
		cloud_dir="${cloud_decrypt_dir}"
	fi

	# Make sure GD mountpoint exists.
	if [ ! -d "${cloud_dir}" ]; then
		mkdir -p "${cloud_dir}"
	fi

	# Make sure Plexdrive temp folder exists.
	if [ ! -d "${plexdrive_temp_dir}" ]; then
		mkdir -p "${plexdrive_temp_dir}"
	fi

	# Mount GD if not already mounted.
	if [ $(ps -ef | grep "plexdrive" | grep -v "grep" | wc -l) == "0" ]; then
		echo "[ $(date $(printenv DATE_FORMAT)) ] Mounting Google Drive mountpoint: ${cloud_dir}"
		plexdrive $plexdrive_options "${cloud_dir}" &
	else
		echo "[ $(date $(printenv DATE_FORMAT)) ] Google Drive mountpoint: ${cloud_dir} already mounted."
	fi
}

mount_gdrive_vfs () {
	check_rclone_local

	# Make sure decrypted GD directory exists.
	if [ ! -d "${cloud_decrypt_dir}" ]; then
		mkdir -p "${cloud_decrypt_dir}"
	fi

	sleep 5
	while [ -z "$(ls -A ${cloud_encrypt_dir})" ]
	do
		echo "Waiting for mount ${cloud_encrypt_dir} ..."
		sleep 30
	done

	if [ $(ps -ef | grep "rclone" | grep -v "grep" | wc -l) == "0" ]; then
		echo "[ $(date $(printenv DATE_FORMAT)) ] Mounting decrypted Google Drive: ${cloud_decrypt_dir}"
		rclone mount $rclone_mount_vfs_options "$@" "${rclone_cloud_endpoint}" "${cloud_decrypt_dir}" &
	else
		echo "[ $(date $(printenv DATE_FORMAT)) ] Decrypted mountpoint: ${cloud_decrypt_dir} already mounted."
	fi
}

mount_local_media () {
	check_rclone_local

	# Make sure decrypted GD directory exists.
	if [ ! -d "${cloud_decrypt_dir}" ]; then
		mkdir -p "${cloud_decrypt_dir}"
	fi

	sleep 5
	while [ -z "$(ls -A ${cloud_encrypt_dir})" ]
	do
		echo "Waiting for mount ${cloud_encrypt_dir} ..."
		sleep 30
	done

	if [ $(ps -ef | grep "rclone" | grep -v "grep" | wc -l) == "0" ]; then
		echo "[ $(date $(printenv DATE_FORMAT)) ] Mounting decrypted Google Drive: ${cloud_decrypt_dir}"
		rclone mount $rclone_mount_options "$@" "${rclone_local_endpoint}" "${cloud_decrypt_dir}" &
	else
		echo "[ $(date $(printenv DATE_FORMAT)) ] Decrypted mountpoint: ${cloud_decrypt_dir} already mounted."
	fi
}

mount_union () {
	# Make sure combined plex media directory exists.
	if [ ! -d "${local_media_dir}" ]; then
		mkdir -p "${local_media_dir}"
	fi

	if [ ! -d "${local_decrypt_dir}" ]; then
		mkdir -p "${local_decrypt_dir}"
	fi

	sleep 5

	# Mount plex media directory if not already mounted.
	# Check Union Mount Program
	if [ "$(printenv UNION_PROGRAM)" == "UNIONFS" ]; then
		if [ $(ps -ef | grep "unionfs" | grep -v "grep" | wc -l) == "0" ]; then
			ufs_mounts="${local_decrypt_dir}=RW:${cloud_decrypt_dir}=RO"
			echo "[ $(date $(printenv DATE_FORMAT)) ] Mounting union: ${local_media_dir}"
			unionfs $ufs_options "${ufs_mounts}" "${local_media_dir}"
		else
			echo "[ $(date $(printenv DATE_FORMAT)) ] Union mountpoint: ${local_media_dir} already mounted."
		fi
	fi

	if [ "$(printenv UNION_PROGRAM)" == "MERGERFS" ]; then
		if [ $(ps -ef | grep "mergerfs" | grep -v "grep" | wc -l) == "0" ]; then
			mfs_mounts="${local_decrypt_dir}:${cloud_decrypt_dir}"
			echo "[ $(date $(printenv DATE_FORMAT)) ] Mounting union: ${local_media_dir}"
			mergerfs $mfs_options "${mfs_mounts}" "${local_media_dir}"
		else
			echo "[ $(date $(printenv DATE_FORMAT)) ] Union mountpoint: ${local_media_dir} already mounted."
		fi
	fi

	if [ "$(printenv UNION_PROGRAM)" == "RCLONE" ]; then
		check_rclone_union
		echo "[ $(date $(printenv DATE_FORMAT)) ] Mounting union: ${local_media_dir}"
		rclone mount $rclone_mount_options "$@" "${rclone_union_endpoint}" "${local_media_dir}" &
	fi
}

#echo "[ $(date ${date_format}) ] Mounting final library with MergerFS in mountpoint: ${local_media_dir}"
#{}"${mfs_bin}" $mfs_options "${mfs_mounts}" "${local_media_dir}"
#echo "[ $(date ${date_format}) ] Mounted successfully with MergerFS"

###############################################################################

if pidof -o %PPID -x "$(basename "$0")"; then
	echo "[ $(date $(printenv DATE_FORMAT)) ] Mount already in progress. Aborting."
else
	mount_gdrive_vfs
	if [ "$(printenv ENCRYPT_MEDIA)" != "0" ]; then
		#mount_local_media
	fi
	if [ "$(printenv UNION_ENABLED)" != "0" ]; then
		mount_union
	fi
fi

exit 0
